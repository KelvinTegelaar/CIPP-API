function Invoke-CIPPStandardMalwareFilterPolicy {
    <#
    .FUNCTIONALITY
    Internal
    #>

    param($Tenant, $Settings)
    $MalwareFilterState = New-ExoRequest -tenantid $Tenant -cmdlet 'Get-MalwareFilterPolicy' | 
    Where-Object -Property Name -eq $PolicyName | 
    Select-Object Name, EnableFileFilter, FileTypeAction, ZapEnabled, QuarantineTag, EnableInternalSenderAdminNotifications, InternalSenderAdminAddress, EnableExternalSenderAdminNotifications, ExternalSenderAdminAddress

    $PolicyName = "Default Malware Policy"
    $StateIsCorrect = if (
        ($MalwareFilterState.Name -eq $PolicyName) -and
        ($MalwareFilterState.EnableFileFilter -eq $true) -and 
        ($MalwareFilterState.FileTypeAction -eq $Settings.FileTypeAction) -and
        ($MalwareFilterState.ZapEnabled -eq $true) -and
        ($MalwareFilterState.QuarantineTag -eq $Settings.QuarantineTag) -and
        ($MalwareFilterState.EnableInternalSenderAdminNotifications -eq $Settings.EnableInternalSenderAdminNotifications) -and
        ($MalwareFilterState.InternalSenderAdminAddress -eq $Settings.InternalSenderAdminAddress) -and
        ($MalwareFilterState.EnableExternalSenderAdminNotifications -eq $Settings.EnableExternalSenderAdminNotifications) -and
        ($MalwareFilterState.ExternalSenderAdminAddress -eq $Settings.ExternalSenderAdminAddress)
    ) { $true } else { $false }

    if ($Settings.remediate) {
        
        if ($StateIsCorrect) {
            Write-LogMessage -API 'Standards' -tenant $Tenant -message 'Malware Filter Policy already exists.' -sev Info
        } else {
            $cmdparams = @{
                EnableFileFilter = $true
                FileTypeAction = $Settings.FileTypeAction
                ZapEnabled = $true
                QuarantineTag = $Settings.QuarantineTag
                EnableInternalSenderAdminNotifications = $Settings.EnableInternalSenderAdminNotifications
                InternalSenderAdminAddress = $Settings.InternalSenderAdminAddress
                EnableExternalSenderAdminNotifications = $Settings.EnableExternalSenderAdminNotifications
                ExternalSenderAdminAddress = $Settings.ExternalSenderAdminAddress
            }

            try {
                if ($MalwareFilterState.Name -eq $PolicyName) {
                    $cmdparams.Add("Identity", $PolicyName)
                    New-ExoRequest -tenantid $Tenant -cmdlet 'Set-MalwareFilterPolicy' -cmdparams $cmdparams
                    Write-LogMessage -API 'Standards' -tenant $Tenant -message 'Updated Malware Filter Policy' -sev Info
                } else {
                    $cmdparams.Add("Name", $PolicyName)
                    New-ExoRequest -tenantid $Tenant -cmdlet 'New-MalwareFilterPolicy' -cmdparams $cmdparams
                    Write-LogMessage -API 'Standards' -tenant $Tenant -message 'Created Malware Filter Policy' -sev Info
                }
            } catch {
                Write-LogMessage -API 'Standards' -tenant $Tenant -message "Failed to create Malware Filter Policy. Error: $($_.exception.message)" -sev Error
            }
        }
    }

    if ($Settings.alert) {

        if ($StateIsCorrect) {
            Write-LogMessage -API 'Standards' -tenant $Tenant -message 'Malware Filter Policy is enabled' -sev Info
        } else {
            Write-LogMessage -API 'Standards' -tenant $Tenant -message 'Malware Filter Policy is not enabled' -sev Alert
        }
    }

    if ($Settings.report) {
        Add-CIPPBPAField -FieldName 'MalwareFilterPolicy' -FieldValue [bool]$StateIsCorrect -StoreAs bool -Tenant $tenant
    }
    
}